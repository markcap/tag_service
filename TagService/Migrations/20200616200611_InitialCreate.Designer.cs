// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TagService.Models;

namespace TagService.Migrations
{
  [DbContext(typeof(TagDbContext))]
  [Migration("20200616200611_InitialCreate")]
  partial class InitialCreate
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
          .HasAnnotation("ProductVersion", "3.1.4")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      modelBuilder.Entity("TagService.Models.Item", b =>
          {
            b.Property<long>("ItemId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<long>("ForeignId")
                      .HasColumnType("bigint");

            b.Property<long>("ItemTypeId")
                      .HasColumnType("bigint");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.HasKey("ItemId");

            b.HasIndex("Active");

            b.HasIndex("ForeignId");

            b.HasIndex("ItemTypeId");

            b.HasIndex("ForeignId", "ItemTypeId")
                      .IsUnique();

            b.ToTable("Items");
          });

      modelBuilder.Entity("TagService.Models.ItemTag", b =>
          {
            b.Property<long>("ItemTagId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<long>("ItemId")
                      .HasColumnType("bigint");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.Property<long>("TagId")
                      .HasColumnType("bigint");

            b.HasKey("ItemTagId");

            b.HasIndex("Active");

            b.HasIndex("TagId");

            b.HasIndex("ItemId", "TagId")
                      .IsUnique();

            b.ToTable("ItemTags");
          });

      modelBuilder.Entity("TagService.Models.ItemType", b =>
          {
            b.Property<long>("ItemTypeId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<string>("ItemTypeName")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.HasKey("ItemTypeId");

            b.HasIndex("Active");

            b.HasIndex("ItemTypeName")
                      .IsUnique();

            b.ToTable("ItemTypes");
          });

      modelBuilder.Entity("TagService.Models.Tag", b =>
          {
            b.Property<long>("TagId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.Property<long>("TagGroupId")
                      .HasColumnType("bigint");

            b.Property<string>("TagName")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("TagId");

            b.HasIndex("Active");

            b.HasIndex("TagName");

            b.HasIndex("TagGroupId", "TagName")
                      .IsUnique();

            b.ToTable("Tags");
          });

      modelBuilder.Entity("TagService.Models.TagGroup", b =>
          {
            b.Property<long>("TagGroupId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.Property<long?>("RequiredTagId")
                      .HasColumnType("bigint");

            b.Property<string>("TagGroupName")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<long>("TagGroupTypeId")
                      .HasColumnType("bigint");

            b.HasKey("TagGroupId");

            b.HasIndex("Active");

            b.HasIndex("RequiredTagId");

            b.HasIndex("TagGroupName");

            b.HasIndex("TagGroupTypeId", "TagGroupName")
                      .IsUnique();

            b.ToTable("TagGroups");
          });

      modelBuilder.Entity("TagService.Models.TagGroupType", b =>
          {
            b.Property<long>("TagGroupTypeId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("Active")
                      .HasColumnType("boolean");

            b.Property<DateTime>("CreatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTime?>("LastUpdatedAt")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("LastUpdatedBy")
                      .HasColumnType("text");

            b.Property<string>("TagGroupTypeName")
                      .IsRequired()
                      .HasColumnType("text");

            b.HasKey("TagGroupTypeId");

            b.HasIndex("Active");

            b.HasIndex("TagGroupTypeName")
                      .IsUnique();

            b.ToTable("TagGroupTypes");
          });

      modelBuilder.Entity("TagService.Models.Item", b =>
          {
            b.HasOne("TagService.Models.ItemType", "ItemType")
                      .WithMany("Items")
                      .HasForeignKey("ItemTypeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("TagService.Models.ItemTag", b =>
          {
            b.HasOne("TagService.Models.Item", "Item")
                      .WithMany("ItemTags")
                      .HasForeignKey("ItemId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("TagService.Models.Tag", "Tag")
                      .WithMany("ItemTags")
                      .HasForeignKey("TagId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("TagService.Models.Tag", b =>
          {
            b.HasOne("TagService.Models.TagGroup", "TagGroup")
                      .WithMany("Tags")
                      .HasForeignKey("TagGroupId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("TagService.Models.TagGroup", b =>
          {
            b.HasOne("TagService.Models.Tag", "RequiredTag")
                      .WithMany("RequiredByTagGroups")
                      .HasForeignKey("RequiredTagId");

            b.HasOne("TagService.Models.TagGroupType", "TagGroupType")
                      .WithMany("TagGroups")
                      .HasForeignKey("TagGroupTypeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
